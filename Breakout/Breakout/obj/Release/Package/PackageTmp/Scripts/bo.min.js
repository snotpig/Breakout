"use strict"; function start() { canvas.style.display = "block", banner.style.display = "none", canvas.addEventListener("dblclick", dblClick), document.addEventListener("keydown", keyDown), document.addEventListener("click", mouseClick), canvas.addEventListener("mousedown", mouseDown), canvas.addEventListener("mouseup", mouseUp), document.addEventListener("mousemove", mouseMove), document.addEventListener("touchmove", touchMove), document.addEventListener("touchstart", touchStart), loadSounds(), createLevels(), initGame() } function initGame() { ctx.clearRect(0, 0, width, height), gmOvr = showPB = sbDown = !1, pad = { x: 300, y: 380, dx: 7, size: 30 }, lives = 3, timer = bTimer = score = bonus = 0, level = 1, bricks = [], startLevel(), lastRender = performance.now(), requestAnimationFrame(draw) } function loseLife() { lives--, sound = "lose", 0 === lives ? gameOver() : serve() } function serve() { var a = (pad.x - 300) / 10, b = Math.sign(a); ball.x = pad.x - a, ball.y = 363, ball.dx = 2 * (Math.random() - b), ball.dy = -Math.sqrt(levels[level].velSq - ball.dx * ball.dx), timer = 60 } function levelUp() { var a = Math.round((2e4 * (level + 8) - time) / 100); console.log("level: " + level + ", tb: " + a), a < 0 && (a = 0), bonus = 100 * level + a, bTimer = 100, level++, startLevel() } function startLevel() { rows = levels[level].rows, gap = levels[level].gap, velSq = levels[level].velSq, serve(), startTime = Date.now(), newLvl = !0, timer = 90 } function gameOver() { checkHi(), gmOvr = !0, timer = 2 } function update() { if (!paused) { if (bTimer) return --bTimer; if (bonus) { var a = bonus > 100 ? 10 : 1; return bonus -= a, void (score += a) } if (timer > 1) return --timer; if (timer > 0 && (timer--, gmOvr && !hiScore ? showPB = !0 : newLvl && (createBricks(rows), newLvl = !1)), !gmOvr) { time = Date.now() - startTime; var b = boost ? 6 : 0; if (pad.x += (rKey ? pad.dx + b : 0) - (lKey ? pad.dx + b : 0), pad.x < 0 && (pad.x = 0), pad.x > width && (pad.x = width), ball.x += ball.dx, ball.y += ball.dy, ball.y > 410) return void loseLife(); if (ball.x < 10 && ball.dx < 0 || ball.x > 590 && ball.dx > 0) { ball.dx = -.9 * ball.dx; var c = Math.sqrt(levels[level].velSq - ball.dx * ball.dx); return ball.dy = Math.sign(ball.dy) * c, void (sound = "wall") } if (ball.y < 10 && ball.dy < 0) return ball.dy = -ball.dy, void (sound = "top"); if (ball.y > pad.y - 17 && ball.y < pad.y + 0 && ball.dy > 0 && ball.x < pad.x + pad.size + 9 && ball.x > pad.x - pad.size - 9) { var d = levels[level].velSq, e = (ball.x - pad.x) / pad.size; return ball.dx = ball.dx * (1 - Math.abs(e)) + 3 * e, ball.dx * ball.dx > .6 * d && (ball.dx = Math.sqrt(d - 2) * Math.sign(ball.dx)), ball.dy = -Math.sqrt(d - ball.dx * ball.dx), void (sound = "paddle") } if (ball.y <= gap + 22 * rows) { var f = bricks.findIndex(function (a) { if (a) { var b = 11, c = 37, d = 10, e = (a.x + b - ball.x) * (a.x + b - ball.x) + (a.y + d - ball.y) * (a.y + d - ball.y), f = (a.x + c - ball.x) * (a.x + c - ball.x) + (a.y + d - ball.y) * (a.y + d - ball.y); return e < 441 || f < 441 } }); if (f >= 0) { Math.abs(ball.x - (bricks[f].x + 24)); Math.abs(ball.x - (bricks[f].x + 24)) >= 28 ? ball.dx = -ball.dx : ball.dy = -ball.dy, delete bricks[f], score += 10, brickCount--, sound = "brick", 0 === brickCount && levelUp() } } } } } function draw(a) { T = gmOvr ? 500 : 15; var b = a - lastRender; if (b >= T) { for (var c = Math.floor(b / T) ; c > 0;) update(), c--; lastRender = a, ctx.clearRect(0, 0, width, height), drawBricks(), 0 === timer && drawBall(), drawPaddle(), drawTopLine(), soundOn && sound && sounds[sound].play(), sound = void 0, bTimer && drawLvlClr(), bonus && bTimer < 70 && drawBonus(), gmOvr && drawgmOvr(), paused && drawPaused() } requestAnimationFrame(draw) } function drawBricks() { function a(a, b, c) { const d = [["#3333ff", "#3333aa", "#5555ff"], ["#13c713", "#13a713", "#35e735"], ["#c73333", "#a73535", "#e75555"], ["#33c7ff", "#33a7aa", "#55e7ff"], ["#c737c7", "#a737a7", "#e762e7"], ["#e7e033", "#c7c733", "#f7f755"], ["#8023ff", "#6323b3", "#9043ff"], ["#875023", "#723a13", "#976043"], ["#ff9922", "#e98800", "#ffb524"]], e = 38, f = 16, g = Math.round(2.24), h = Math.round(9.5), i = Math.round(8); ctx.fillStyle = d[c][0], ctx.fillRect(a, b, e, f), ctx.strokeStyle = d[c][0], ctx.fillStyle = d[c][1], ctx.beginPath(), ctx.moveTo(a + g, b + g), ctx.lineTo(a + h, b + i), ctx.lineTo(a + e - h, b + i), ctx.lineTo(a + e - g, b + g), ctx.lineTo(a + g, b + g), ctx.stroke(), ctx.fill(), ctx.fillStyle = d[c][2], ctx.beginPath(), ctx.moveTo(a + g, b + f - g), ctx.lineTo(a + h, b + i), ctx.lineTo(a + e - h, b + i), ctx.lineTo(a + e - g, b + f - g), ctx.lineTo(a + g, b + f - g), ctx.stroke(), ctx.fill() } bricks.forEach(function (b) { a(b.x, b.y, b.col) }) } function drawBall() { var a = ctx.createRadialGradient(ball.x, ball.y - 4, 0, ball.x, ball.y, 10); a.addColorStop(0, "#eeeeff"), a.addColorStop(1, "#8899ff"), ctx.fillStyle = a, ctx.beginPath(), ctx.arc(ball.x, ball.y, 10, 0, 2 * Math.PI), ctx.fillStyle = a, ctx.fill() } function drawPaddle() { var a = ctx.createLinearGradient(pad.x, 375, pad.x, 384); a.addColorStop(0, "#ff2222"), a.addColorStop(1, "#66ff77"), ctx.fillStyle = a, ctx.beginPath(), ctx.arc(pad.x - pad.size + 7, pad.y, 7, Math.PI / 2, -Math.PI / 2), ctx.arc(pad.x + pad.size - 7, pad.y, 7, -Math.PI / 2, Math.PI / 2), ctx.fill() } function drawTopLine() { ctx.font = "26px Verdana", ctx.fillStyle = "rgba(150,230,255,0.95)", ctx.fillText("Level " + level, 250, 21), ctx.fillStyle = "rgba(231,227,51,0.95)", ctx.fillText("Score: " + score, 1, 21), lives > 0 ? ctx.fillStyle = "rgba(22,185,22,0.95)" : ctx.fillStyle = "rgba(255,38,38,0.95)", ctx.fillText("Lives: " + lives, 495, 21), drawPauseBtn(), drawSpkr() } function drawLvlClr() { ctx.font = "bold 48px Tahoma"; var a = ctx.createLinearGradient(160, 90, 160, 120); a.addColorStop(0, "#c0ccff"), a.addColorStop(.33, "#ffffaa"), a.addColorStop(.66, "#ffcccc"), a.addColorStop(1, "#aaffff"), ctx.fillStyle = a, ctx.fillText("Level Cleared!", 130, 120) } function drawBonus() { ctx.font = "bold 36px Tahoma"; var a = ctx.createLinearGradient(180, 210, 360, 240); a.addColorStop(0, "#d78d38"), a.addColorStop(.33, "#f7d02e"), a.addColorStop(.66, "#d78d38"), a.addColorStop(1, "#f7d02e"), ctx.fillStyle = a, ctx.fillText("Bonus:  " + bonus, 180, 220) } function drawPaused() { ctx.fillStyle = "rgba(0,0,0,0.5)", ctx.fillRect(0, 0, width, height), ctx.font = "38px Verdana", ctx.fillStyle = "#ffffee", ctx.fillText("PAUSED", 220, 215) } function drawSpkr() { var a = spkX, b = 1; ctx.strokeStyle = "rgba(255,255,200,0.8)", ctx.fillStyle = "rgba(255,255,255,0.4)", soundOn && (ctx.fillStyle = "rgba(255,255,200,0.8)", ctx.beginPath(), ctx.moveTo(a + 16, b + 5), ctx.lineTo(a + 21, b + 2), ctx.moveTo(a + 16, b + 11), ctx.lineTo(a + 23, b + 11), ctx.moveTo(a + 16, b + 17), ctx.lineTo(a + 20, b + 20), ctx.stroke()), ctx.fillRect(a + 0, b + 5, 4, 12), ctx.beginPath(), ctx.moveTo(a + 6, b + 5), ctx.lineTo(a + 14, b + 0), ctx.lineTo(a + 14, b + 22), ctx.lineTo(a + 6, b + 17), ctx.lineTo(a + 6, b + 2), ctx.fill() } function drawPauseBtn() { var a = 3; paused ? ctx.fillStyle = "rgba(255,255,200,0.8)" : ctx.fillStyle = "rgba(255,255,255,0.4)", ctx.fillRect(psX, a, 5, 17), ctx.fillRect(392, a, 5, 17) } function drawgmOvr() { if (ctx.font = "70px Tahoma", ctx.fillStyle = "rgba(0,0,0,0.5)", ctx.fillRect(0, 30, width, 370), ctx.fillStyle = "rgba(150,230,255,0.95)", ctx.fillText("Game Over", 124, 210), showPB) { var a = 250, b = 270, c = 100, d = 36, e = 5; if (sbDown) ctx.fillStyle = "#000000"; else { var f = ctx.createLinearGradient(a + c / 2, b, a + c / 2, b + d); f.addColorStop(0, "#444444"), f.addColorStop(.1, "#111111"), f.addColorStop(.8, "#222222"), f.addColorStop(.95, "#000000"), ctx.fillStyle = f } ctx.strokeStyle = "#ffffff", ctx.beginPath(), ctx.moveTo(a + e, b), ctx.lineTo(a + c - e, b), ctx.arcTo(a + c, b, a + c, b + e, 10), ctx.lineTo(a + c, b + d - e), ctx.arcTo(a + c, b + d, a + c - e, b + d, 10), ctx.lineTo(a + e, b + d), ctx.arcTo(a, b + d, a, b + d - e, 10), ctx.lineTo(a, b + e), ctx.arcTo(a, b, a + e, b, 10), ctx.stroke(), ctx.fill(), ctx.fillStyle = "#50ff70", ctx.font = "18px Tahoma", ctx.fillText("Play again", a + 9, b + 23) } } function loadSounds() { sounds = {}, sounds.wall = new Audio("../Sound/w.wav"), sounds.brick = new Audio("../Sound/b.wav"), sounds.top = new Audio("../Sound/t.wav"), sounds.paddle = new Audio("../Sound/p.wav"), sounds.lose = new Audio("../Sound/l.wav") } function createLevels() { levels = []; for (var a = 0; a < 15; a++) { var b = { rows: 0 === a ? 1 : 6 + a, gap: a > 10 ? 30 : 80 - 5 * a, velSq: 24 + 2 * a }; levels.push(b) } } function createBricks(a) { bricks = []; for (var b = 0; b < a; b++) for (var c = 0; c < COLUMNS; c++) bricks.push({ x: 1 + 40 * c, y: gap + 18 * b, col: Math.floor(9 * Math.random()) }); brickCount = COLUMNS * a } function keyDown(a) { hiScore || (39 === a.keyCode ? rKey = !0 : 37 === a.keyCode ? lKey = !0 : 32 === a.keyCode && (boost = !0)) } function keyUp(a) { hiScore || (39 === a.keyCode ? rKey = !1 : 37 === a.keyCode ? lKey = !1 : 32 === a.keyCode ? boost = !1 : 80 === a.keyCode ? paused = !paused : 87 === a.keyCode ? (fullWidth = !fullWidth, adjustWidth()) : 27 === a.keyCode ? (fullWidth = !1, adjustWidth()) : 83 === a.keyCode ? soundOn = !soundOn : showPB && 13 === a.keyCode ? initGame() : hiScore && 13 === a.keyCode && submitScore(a)) } function mouseMove(a) { var b = (a.clientX - canvas.offsetLeft) * width / canvas.offsetWidth, c = (a.clientY - canvas.offsetTop) * height / canvas.offsetHeight; gmOvr || paused || timer || b >= 0 && b <= canvas.width && (pad.x = b), showPB && b >= 250 && b <= 350 && c >= 270 && c <= 306 ? canvas.style.cursor = "pointer" : b >= spkX && b <= 463 && c >= 0 && c <= 22 ? canvas.style.cursor = "pointer" : b >= psX && b <= 401 && c >= 0 && c <= 22 ? canvas.style.cursor = "pointer" : canvas.style.cursor = gmOvr || paused || c <= 22 ? "default" : "none" } function touchMove(a) { a.preventDefault(); var b = (a.changedTouches[0].clientX - canvas.offsetLeft) * width / canvas.offsetWidth; (a.clientY - canvas.offsetTop) * height / canvas.offsetHeight; gmOvr || paused || timer || b > 0 && b < canvas.width && (pad.x = b - pad.size / 2) } function touchStart(a) { touch = !0 } function mouseClick(a) { var b = (a.clientX - canvas.offsetLeft) * width / canvas.offsetWidth, c = (a.clientY - canvas.offsetTop) * height / canvas.offsetHeight; b >= spkX && b <= 463 && c >= 0 && c <= 22 ? (soundOn = !soundOn, storageAvailable("localStorage") && localStorage.setItem("BO1701soundOn", soundOn.toString())) : !gmOvr && b >= psX && b <= 401 && c >= 0 && c <= 22 ? paused = !paused : gmOvr || (paused = !(b >= 0 && b <= width && c >= 0 && c <= height)) } function mouseDown(a) { var b = (a.clientX - canvas.offsetLeft) * width / canvas.offsetWidth, c = (a.clientY - canvas.offsetTop) * height / canvas.offsetHeight; showPB && b >= 250 && b <= 350 && c >= 270 && c <= 306 && (sbDown = !0) } function mouseUp(a) { var b = (a.clientX - canvas.offsetLeft) * width / canvas.offsetWidth, c = (a.clientY - canvas.offsetTop) * height / canvas.offsetHeight; sbDown && b >= 250 && b <= 350 && c >= 270 && c <= 306 && initGame(), sbDown = !1 } function dblClick() { fullWidth = !fullWidth, adjustWidth() } function adjustWidth() { touch = !0; var a = .667 + (touch ? .1 : 0); if (fullWidth && window.innerWidth > width) if (window.innerHeight > a * window.innerWidth) canvas.style.width = "100%"; else { var b = Math.floor(window.innerHeight / a); banner.style.width = canvas.style.width = b + "px", banner.style.height = .667 * b + "px" } else banner.style.width = canvas.style.width = "600px", banner.style.height = "400px" } function loadHiScores() { var a = new XMLHttpRequest; a.onreadystatechange = function () { 4 === this.readyState && (200 === this.status ? (hiScores = JSON.parse(a.responseText), displayScores()) : console.log("Error: " + a.statusText)) }, a.open("GET", "/Scores/get", !0), a.send() } function displayScores() { for (var a = 0; a < hiScores.length; a++) document.getElementById("hs_n" + a).innerHTML = hiScores[a].name, document.getElementById("hs_s" + a).innerHTML = hiScores[a].score } function checkHi() { var a = hiScores.length; (a < 6 || a && score > hiScores[a - 1].score) && setTimeout(function () { hiScore = !0, fullWidth = !1, adjustWidth(), document.getElementById("hs_list").style.display = "none", document.getElementById("hs_dlg").style.display = "block", document.getElementById("btn_submit").addEventListener("click", submitScore) }, 700) } function submitScore(a) { var b = document.getElementById("txt_name").value.replace(/[\"<>]+/g, "_"), c = new XMLHttpRequest; c.onreadystatechange = function (a) { 4 === this.readyState && (200 === this.status ? (hiScores = JSON.parse(c.responseText), document.getElementById("hs_dlg").style.display = "none", document.getElementById("hs_list").style.display = "block", displayScores(), hiScore = !1, showPB = !0) : console.log("Error: " + c.statusText)) }, c.open("POST", "/Scores/add", !0), c.setRequestHeader("Content-type", "application/x-www-form-urlencoded"), c.setRequestHeader("Accept", "application/json"); var d = "score=" + score + "&name=" + b; c.send(d) } var banner = document.getElementById("game"), hsTable = document.getElementById(hs_tbl), touch = !1, fullWidth = !1, hiScores = [], hiScore = !1, btn = document.getElementById("btn"), canvas = document.getElementById("canvas"), ctx = canvas.getContext("2d"); const width = 600, height = 400, COLUMNS = 15, psX = 385, spkX = 443; var rKey = !1, lKey = !1, boost = !1, T, sounds, soundOn = !1, paused = !1, sbDown, levels, ball = {}, pad, rows, brickCount, bricks = [], gap, timer, bTimer, lives, gmOvr, showPB, newLvl, lastRender, sound, score, level, velSq, time, startTime, bonus; storageAvailable("localStorage") && (soundOn = "true" === localStorage.getItem("BO1701soundOn")), btn.addEventListener("click", start), banner.addEventListener("dblclick", dblClick), document.addEventListener("keyup", keyUp), loadHiScores();